# -*- coding: utf-8 -*-
"""Tugas Besar VisDat_IF-42-GAB01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKRa31OYgp7pQUVJTeMeIhrPG42HG32i

# Tugas Besar Visualisasi Data IF-43-GAB01
Anggota Kelompok:
- Alifia Shafira (1301194102)
- Serly Setyani (1301190225)
"""

# Import Library
import pandas as pd
import numpy as np
from bokeh.io import curdoc
from bokeh.plotting import figure
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
from bokeh.layouts import widgetbox, row, gridplot
from bokeh.models import Slider, Select
from bokeh.io import output_file, show


data_death = pd.read_csv("data/no_of_deaths_by_country_clean.csv")
data_death.head()

data_death.rename(columns={'WHO Region': 'Region'}, inplace=True)
data_death.set_index('Year', inplace=True)


data_byregion = data_death.Region.unique().tolist()
color_mapper = CategoricalColorMapper(factors=data_byregion, palette=Spectral6)

source = ColumnDataSource(data={
    'x': data_death.loc[2000].Count_min,
    'y': data_death.loc[2000].Count_max,
    'country': data_death.loc[2000].Country,
    'region': data_death.loc[2000].Region,
})

plot = figure(title='2000', x_axis_label='Count (min)', y_axis_label='Count (max)',
              plot_height=400, plot_width=700, tools=[HoverTool(tooltips='@country')])

plot.circle(x='x', y='y', source=source, fill_alpha=0.8,
            color=dict(field='region', transform=color_mapper), legend='region')

plot.legend.location = 'bottom_left'

# Define the callback function: update_plot


def update_plot(attr, old, new):
    # set the `yr` name to `slider.value` and `source.data = new_data`
    yr = slider.value
    x = x_select.value
    y = y_select.value
    # Label axes of plot
    plot.xaxis.axis_label = x
    plot.yaxis.axis_label = y
    # new data
    new_data = {
        'x': data_death.loc[yr][x],
        'y': data_death.loc[yr][y],
        'country': data_death.loc[yr].Country,
        'region': data_death.loc[yr].Region,
    }
    source.data = new_data

    # Add title to figure: plot.title.text
    plot.title.text = 'Gapminder data for %d' % yr


# Make a slider object: slider
slider = Slider(start=2000, end=2010, step=1, value=2000, title='Year')
slider.on_change('value', update_plot)

# Make dropdown menu for x and y axis
# Create a dropdown Select widget for the x data: x_select
x_select = Select(
    options=['Count (min)', 'Count (med)', 'Count (max)'],
    value='Count (min)',
    title='x-axis data'
)
# Attach the update_plot callback to the 'value' property of x_select
x_select.on_change('value', update_plot)

# Create a dropdown Select widget for the y data: y_select
y_select = Select(
    options=['Count (min)', 'Count (med)', 'Count (max)'],
    value='Count (max)',
    title='y-axis data'
)
# Attach the update_plot callback to the 'value' property of y_select
y_select.on_change('value', update_plot)

# Create layout and add to current document
layout = row(widgetbox(slider, x_select, y_select), plot)
curdoc().add_root(layout)
curdoc().title = "Movies"

# hiii
# ivy tes
